@page "/login"
@inject AccountService AccountService
@inject NavigationManager NavigationManager

<div class="card">
    <div class="card-header" style="background-color: white;">
        <center>
            <img src="/img/original_cropped.png" style="height: auto; width: 100%;" />
            <h4><b>Traceability Internet Directory Service</b></h4>
        </center>
    </div>
    <div class="card-body">
        <EditForm Model="@model" OnValidSubmit="OnValidSubmit">
            <DataAnnotationsValidator />
            <div class="form-group">
                <label>Email</label>
                <InputText @bind-Value="model.Email" class="form-control" />
                <ValidationMessage For="@(() => model.Email)" />
            </div>
            <div class="form-group">
                <label>Password</label>
                <InputText @bind-Value="model.Password" type="password" class="form-control" />
                <ValidationMessage For="@(() => model.Password)" />
            </div>
            <div style="margin-bottom: 15px;">
                <i style="font-size: 0.8em; color: red;">@error</i>
            </div>
            <div style="display: flex; flex-direction: row;">
                <div style="flex: 1;">
                    <button disabled="@loading" class="k-button k-primary" style="width: 150px;">
                        @if (loading)
                        {
                            <span class="spinner-border spinner-border-sm mr-1"></span>
                            <span>Logging In</span>
                        }
                        else
                        {
                            <span>Login</span>
                        }
                    </button>
                </div>
            </div>
        </EditForm>
    </div>
</div>

@code {
    private LoginModel model = new LoginModel();
    private bool loading;
    private string error;

#pragma warning disable CS1998
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        try
        {
            if (firstRender == true)
            {

            }
        }
        catch
        {

        }

        base.OnInitialized();
    }
#pragma warning enable CS1998

    private async void OnValidSubmit()
    {
        loading = true;
        string error = await AccountService.Login(this.model.Email, this.model.Password);
        if(string.IsNullOrWhiteSpace(error))
        {
            var returnUrl = NavigationManager.QueryString("returnUrl") ?? "";
            NavigationManager.NavigateTo(returnUrl);
        }
        else
        {
            this.error = error;
        }
        loading = false;
    }
}