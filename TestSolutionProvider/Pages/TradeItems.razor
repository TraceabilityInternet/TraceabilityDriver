@page "/tradeitems"

@inject ISolutionProviderService SolutionProviderService;

<div style="height: 100%;">
    <TelerikGrid Data="@ProductsList" Height="100%"
                 Pageable="true" Sortable="true"
                 Resizable="true" Reorderable="true">
        <GridColumns>
            <GridCommandColumn Width="100px">
                <GridCommandButton OnClick="@ViewRaw" Primary="true">View Raw Data</GridCommandButton>
            </GridCommandColumn>
            <GridColumn Field="Name" Width="200px" />
            <GridColumn Field="GTIN" Width="200px" />
            <GridColumn Field="Description" Width="400px" />
        </GridColumns>
    </TelerikGrid>

    <TelerikWindow @bind-Visible="@showRawData">
        <WindowTitle>
            <strong>Raw Data</strong>
        </WindowTitle>
        <WindowContent>
            <textarea style="height: 500px; width: 500px;">
                @rawData
            </textarea>
            <center style="margin-top: 1.0em;">
                <button class="k-button" @onclick="() => { this.showRawData = false; }" style="width: 150px; margin-left: 0.2em;">Close</button>
            </center>
        </WindowContent>
    </TelerikWindow>
</div>

@code {
    bool showRawData = false;
    string rawData = null;

    ObservableCollection<ITEProduct> ProductsList = new ObservableCollection<ITEProduct>();

    protected override async Task OnInitializedAsync()
    {
        this.ProductsList = new ObservableCollection<ITEProduct>(await SolutionProviderService.GetProductsAsync());
        base.OnInitialized();
    }

    private async Task ViewRaw(GridCommandEventArgs args)
    {
        ITEProduct row = (ITEProduct)args.Item;
        this.rawData = await this.SolutionProviderService.GetRawData(row.GTIN?.ToString());
        this.showRawData = true;
    }
}